<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemy</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
_hp = 1
_health = 1;
_myType = obj_spikes;

sprites[1] = spr_eyebotl;
sprites[0] = spr_eyebotr;
sprites[2] = spr_eyebotd;
sprites[3] = spr_eyebotu;

cellHeight = 32;

cellWidth = 32;

_grid = mp_grid_create(0,0,room_width/cellWidth,room_height/cellHeight,cellWidth,cellHeight = 32);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hitting Player
event_inherited();

var gap = 18;

///Collisions that have happened
if(collision_rectangle(x-gap,y-gap,x+gap,y+gap,obj_player,0,1) &amp;&amp; Damage != 0 &amp;&amp; !global.Hit)
{
  global.Hit = 1;
  hitting = true;
  enemy = instance_nearest(x,y,obj_player);
  if(global.Ghost)
  {  enemy.hit = 0;  }
  else
  {  enemy.hit = self.Damage;  }
  enemy.hitl = (enemy.x &lt;= x-8); //Is the enemy to our left?
  enemy.hitr = (enemy.x &gt;= x+8); //Is the enemy to our right?
  enemy.hitu = (enemy.y &lt;= y-8); //Is the enemy above us
  enemy.hitd = (enemy.y &gt;= y+8); //Is the enemy below us
  //enemy = noone;
  //instance_destroy();
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Viewfinding
if(instance_exists(obj_player) &amp;&amp; !global.Ghost)
{   //In FOV and not hit, we see player
    if(scr_fov(deg,fov_deg,view_dist,plyr1.x,plyr1.y) &amp;&amp; !_isHit)
    {
      see_ply = true;
    }//out of ditstance OR hit, cant see player
    else if(distance_to_object(plyr1) &gt; view_dist || _isHit)
    { 
      see_ply = false;
    }
    //Basic Pathfinding
    if(see_ply &amp;&amp; !_isHit)
    {
      mp_potential_step_object(plyr1.x,plyr1.y,spd*2,par_wall);
    //}
     /* _path = path_add();
      mp_grid_path(_grid,_path,x,y,plyr1.x,plyr1.y,1);
     // mp_potential_path_object(_path,plyr1.x,plyr1.y,spd*2,5,obj_player);
      path_set_kind(_path,1);
      path_set_precision(_path,8);
      path_end();
      path_start(_path, spd*1.5, 0, 1);
    }
    else
    {
      path_end();*/
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

/*
* draws line to player from enemies, keep for later
* draw_line(x, y, plyr1.x,plyr1.y);
*/


/*
FOV2=fov_deg/2;


Dir1=point_direction(x,y,plyr1.x,plyr1.y);
_x1=x+lengthdir_x(50,deg);
_y1=y+lengthdir_y(50,deg);
_x2=x+lengthdir_x(50+view_dist,deg+FOV2);
_y2=y+lengthdir_y(50+view_dist,deg+FOV2);
_x3=x+lengthdir_x(50+view_dist,deg-FOV2);
_y3=y+lengthdir_y(50+view_dist,deg-FOV2);

 _dis = point_distance(x,y,_x1,_y1);


draw_set_colour(c_yellow);
draw_line(_x1+_dis,_y1+_dis,_x2, _y2);
draw_line(_x1+_dis,_y1+_dis,_x3, _y3);


draw_set_colour(c_white);
draw_line(x,y,_x2, _y2);
draw_line(x,y,_x3, _y3);
draw_line(_x2,_y2,_x3,_y3);


*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
