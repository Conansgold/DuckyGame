<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_eyebotd</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_wall</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Intialization
plyr1 = obj_player;
_maxHp = 1;
_hp = _maxHp;

Damage = 1;

normal = 1;

///Basic Initialization
depth = -y;

image_speed = .2;

_solid = 1;

_health = 1;
_myType = "";

sprites[0] = spr_enemy;
sprites[1] = spr_enemy;
sprites[2] = spr_enemy;
sprites[3] = spr_enemy;

_lastX = x;
_lastY = y;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Getting hit - bouncing
hitspd = 8;
_isHit = false;
_maxhitdist = 64;
initialx = x;
initialy = y;
_sliding = true;
hitd = false;
hitu = false;
hitl = false;
hitr = false;
_donehit = false;

//how much damage done to me
hit = 0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarms
alr = irandom(room_speed*2);//room_speed*2;

alr2 = -1

_alrHit = -1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Chasing and attacking
//viewing
view_dist = 250;
see_ply = false;
fov_deg = 90;

///List of enemies and current enemy
enemies_hit = ds_list_create()
enemy = self;

//
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement

//Your verticle speed
vsp = 0;
//Your horrozontal speed
hsp = 0;

//Speed you move at
spd = 1.5;

//Direction enemy is facing
facing = 0;

//Random number to decide direction of movement
ran = 0;

//Field of view width
deg = 0;


sprites = ds_list_create();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
if(!_isHit)
{
  if(ran &gt; 0 &amp;&amp; ran &lt;= 1) //Move Right
  {
    hsp = spd;
  }
  if(ran &gt; 1 &amp;&amp; ran &lt;= 2) //Move Up
  {
    vsp = -spd;
  }
  if(ran &gt; 2 &amp;&amp; ran &lt;= 3) //Move Left
  {
    hsp = -spd;
  }
  if(ran &gt; 3 &amp;&amp; ran &lt;= 4) //Move Down
  {
    vsp = spd; 
  }
}

//Walk, while alarm 1 ticks down;
if(alr &gt;= 0 &amp;&amp; !_isHit)
{
  alr -= 1;
}
//Stop moving when alarm 1 ends
if((alr == 0 &amp;&amp; !_isHit) || (see_ply &amp;&amp; !_isHit))
{ 
  vsp = 0;
  hsp = 0;
  ran = -1;
  alr2 = irandom(room_speed);
}

//Wait before deciding direction
if(alr2 &gt;= 0 &amp;&amp; !_isHit)
{
  alr2 -= 1;
}
//Decide direction and reset time to stop(ran)
if(alr2 == 0 &amp;&amp; !_isHit)
{
  ran = random_range(0, 4);
  alr = irandom(room_speed);
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collisions

//Horizontal Collision
if (place_meeting(x+hsp,y,par_wall) &amp;&amp; _solid)// &amp;&amp; !(place_meeting(x+hsp,y,par_enemy) &amp;&amp; !_isHit))
{
    hsp = 0; 
}/*
else if (place_meeting(x+hsp,y,par_enemy) &amp;&amp; !_isHit)
{
    LR = collision_point(x+hsp, y, par_enemy, 0, 1);
    if(LR.x &lt; x)
    {
        hsp = spd;
    }
    else
    {
        hsp = -spd;
    }
}*/
//Vertical collisions
if (place_meeting(x,y+vsp,par_wall) &amp;&amp; _solid)//  &amp;&amp; (place_meeting(x,y+vsp,par_enemy) &amp;&amp; !_isHit))
{
    vsp = 0; 
}/*
else if (place_meeting(x,y+vsp,par_enemy) &amp;&amp; !_isHit)
{
    UD = collision_point(x, y+vsp, par_enemy, 0, 1);
    if(UD.y &lt; y)
    {
        vsp = spd;
    }
    else
    {
        vsp = -spd;
    }
}
*/

if(hsp == 0 &amp;&amp; vsp&lt;0)
{  facing = 0; hface = 0; vface = -1; deg = 90; }
if(hsp &gt; 0 &amp;&amp; vsp&lt;0)
{  facing = 1; hface = 1; vface = -1; deg = 90; }
if(hsp&gt;0 &amp;&amp; vsp == 0)
{  facing = 2; hface = 1; vface = 0;   deg = 0;}
if(hsp&gt;0 &amp;&amp; vsp&gt;0)
{  facing = 3; hface = 1; vface = 1;   deg = 0;}
if(hsp==0 &amp;&amp; vsp&gt;0)
{  facing = 4; hface = 0; vface = 1;  deg = 270;}
if(hsp&lt;0 &amp;&amp; vsp&gt;0)
{  facing = 5; hface = -1; vface = 1; deg = 270; }
if(hsp &lt; 0 &amp;&amp; vsp == 0)
{  facing = 6; hface = -1; vface = 0; deg = 180; }
if(hsp&lt;0 &amp;&amp; vsp&lt;0)
{  facing = 7; hface = -1; vface = -1; deg = 180; }


if(vsp != 0 || vspeed != 0 || abs(_lastY - y) &gt; 1)
{
  if(vsp &lt; 0 || vspeed &lt; 0 || _lastY - y &gt; 0)
  {
    sprite_index = sprites[3];
  }
  else
  {
    sprite_index = sprites[2];
  }
}
else if(hsp != 0 || hspeed != 0 || abs(_lastX - x) &gt; 1)
{
  if(hsp &lt; 0 || hspeed &lt; 0 || _lastX - x &gt; 0)
  {
    sprite_index = sprites[1];
  }
  else
  {
    sprite_index = sprites[0];
  }

}


if(vsp == 0 &amp;&amp; hsp == 0)
{
    switch(facing)
    {
      case 0:   hface = 0; vface = -1;   break;// sprite_index = sprites[3]; break;
      case 2:   hface = 1; vface = 0;    break;//sprite_index = sprites[0]; break;
      case 4:   hface = 0; vface = 1;   break;//sprite_index = sprites[2]; break;
      case 6:   hface = -1; vface = 0;  break;//sprite_index = sprites[1]; break;
    }
}

_lastX = x;
_lastY = y;

//Commit to movement
x += (hsp/room_speed*60);
y += (vsp/room_speed*60);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dying
if(_hp &lt;= 0 &amp;&amp; normal)
{
  instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bounce Back
if(_isHit &amp;&amp; _sliding = false)
{
  initialx = x;
  initialy = y;
  vsp = 0;
  hsp = 0;
  _sliding = true;
}

if(_isHit &amp;&amp; distance_to_point(initialx,initialy) &lt; _maxhitdist)
{
  if(hitd)  //Down
  {
    vsp = hitspd;
  }
  if(hitu)  //Up
  {
    vsp = -hitspd;
  }
  if(hitr)  //Right
  {
    hsp = hitspd;
  }
  if(hitl)  //Left
  {
    hsp = -hitspd;
  }
}
//reset
else if(_isHit)
{
  vsp = 0;
  hsp = 0;
  hitl = false;
  hitr = false;
  hitd = false;
  hitu = false;
  see_ply =true;
  _isHit = false;
  _sliding = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_weapon">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Weapon Collision
_isHit = true;
//Health - the damage from the weapon that hit it
if(!global.Ghost)
{
  (instance_create(x,y-sprite_height,obj_effect_damage)).text="Hit!";
  _hp -= 1;
  hit = 0;
}
else if(!instance_exists(obj_effect_damage))
{
  (instance_create(x+(random_range(-15,15)-5),y-sprite_height,obj_effect_damage)).text="0";
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>_hp-=9;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

//(draw_text_colour(10, 10,"Random move num: "+ string(ran), c_green, c_green, c_green, c_green, 1);
//draw_text_colour(10, 25, "Can see a player? "+string(see_ply), c_green, c_green, c_green, c_green,1);
//draw_text_colour(10, 40, "Done hit? "+string(_isHit)+" Hit Directions (DULR): "+string(hitd)+string(hitu)+string(hitl)+string(hitr), c_green, c_green, c_green, c_green,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
